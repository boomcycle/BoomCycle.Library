<?xml version="1.0"?>
<doc>
<assembly>
<name>
BoomCycle.Data
</name>
</assembly>
<members>
<member name="M:BoomCycle.Data.BoomCycleDataTable.DoCommand(System.String,System.String,System.Collections.Generic.List{BoomCycle.Data.BoomCycleSqlParams})">
	<summary>
	</summary>
	<param name="conn"></param>
	<param name="sql"></param>
	<param name="sqlParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BoomCycle.Data.BoomCycleDataTable.DoQuery(System.String,System.String,System.Collections.Generic.List{BoomCycle.Data.BoomCycleSqlParams})">
	<summary>
	</summary>
	<param name="conn"></param>
	<param name="sql"></param>
	<param name="sqlParams"></param>
	<remarks></remarks>
</member><member name="M:BoomCycle.Data.BoomCycleDataTable.GetEnumerator">
	<summary>
 itterator for AFFdatarows wrapper
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BoomCycle.Data.BoomCycleDataTable.SetSqlParams(System.Data.SqlClient.SqlCommand,System.Collections.Generic.List{BoomCycle.Data.BoomCycleSqlParams})">
	<summary>
 set all params
 </summary>
	<param name="cmd"></param>
	<param name="sqlParams"></param>
	<remarks></remarks>
</member><member name="M:BoomCycle.Data.BoomCycleData.DoQuery(System.String,System.Collections.Generic.List{BoomCycle.Data.BoomCycleSqlParams})">
	<summary>
Use variable # of args Do query can have optional args of the following form(s):
DoQuery( sql { {, paramName, paramValue}* {, SortFld}} )
That is, 0 or more pairs paramName, paramValue, 
followed possibly by a final parameter giving the name of the field to sort by.

The R of CRUD -- Retrieve.
 </summary>
	<param name="sql"></param>
	<param name="sqlParams"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BoomCycle.Data.BoomCycleData.DoQuery(System.String,System.String,System.Object,System.Object[])">
 DoQuery, varargs version.
 DoQuery( sql, paramName, paramValue {, paramName, paramValue}* )
 That is, 1 or more pairs paramName, paramValue, ... .
 where each paramName is a string (beginning with "@")
 Returns AFFDataTableBase

</member><member name="M:BoomCycle.Data.BoomCycleData.DoCommand(System.String,System.String,System.Object,System.Object[])">
 DoCommand, varargs version.
 DoCommand( sql, paramName0, paramValue0 {, paramName, paramValue}* )
 That is, 1 or more pairs paramName, paramValue, ... .
 where each paramName is a string (beginning with "@")
 Returns number of rows AFFected

</member><member name="M:BoomCycle.Data.BoomCycleDataException.#ctor(System.String)">
	<summary>
 This is the contructor for our custom exception not based on a .net framework exception
 </summary>
	<param name="message"></param>
	<remarks></remarks>
</member><member name="M:BoomCycle.Data.BoomCycleDataException.#ctor(System.String,System.Exception)">
	<summary>
 '''This is the contructor for our custom exception based on a .net framework exception
 </summary>
	<param name="message"></param>
	<param name="originalException"></param>
	<remarks></remarks>
</member><member name="P:BoomCycle.Data.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:BoomCycle.Data.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:BoomCycle.Data.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>